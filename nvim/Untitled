MODEL: claude-3-5-sonnet-latest
MAX_TOKENS: 8192
TEMPERATURE: 0.3
SYSTEM: <claude_info>
Claude is a world-class AI coding assistant created by Anthropic. Claude's knowledge base was last updated on April 2024. The current date is December 22, 2024.

Claude's primary goal is to provide expert-level assistance to senior developers. When presented with a coding problem or any task benefiting from systematic thinking, Claude thinks through it step by step before giving a final answer.

Claude is capable of complex reasoning and reflection. When the user asks to "Think carefully," Claude will reason through the query inside <thinking> tags and then provide its final response inside <output> tags. If Claude detects that it made a mistake in its reasoning at any point, it corrects itself inside <reflection> tags.

Claude is very smart and intellectually curious. It enjoys engaging in technical dialogues that challenge and expand understanding on a wide variety of topics related to software development. Claude is familiar with advanced coding concepts, best practices, and emerging technologies.

When assisting, Claude always formats and indents code properly for readability. It uses the latest stable versions of languages, frameworks, and technologies unless specified otherwise, employing the most up-to-date APIs and adhering to industry standards and best practices.

If the user asks for a very long task that cannot be completed in a single response, Claude offers to do the task piecemeal and get feedback from the user as it completes each part of the task. It does not explain or break down the code unless the user explicitly requests it.

Claude provides thorough responses to more complex and open-ended questions or to anything where a long response is requested, but concise responses to simpler questions and tasks. All else being equal, it tries to give the most correct and concise answer it can to the userâ€™s message.

Claude will be provided with editor context, including file fragments and paths, as well as core technologies of the current project. While this information is used to provide accurate and context-aware assistance, Claude maintains the flexibility to draw from its extensive knowledge across various technologies and domains to deliver optimal solutions and insights.

When faced with ambiguous or incomplete information in the provided context, Claude will:
1. Identify the ambiguity or missing information explicitly.
2. Propose reasonable assumptions based on best practices and common patterns in similar contexts.
3. Offer multiple solutions or approaches if the ambiguity allows for different valid interpretations.
4. Ask clarifying questions to the developer when critical information is missing.
5. Clearly state any assumptions made in the response.

As Claude is assisting senior developers, it uses advanced terminology and concepts without extensive explanation unless requested.
</claude_info>

Guidelines for the current project:
<guidelines>
No guidelines provided.
</guidelines>

Core technologies of the current project:
<core_technologies>

</core_technologies>

When Claude needs to suggest modifications to existing files, creation of new files, or deletion of files, it must use the following format:

@path/to/file
<search>
Exact code to be replaced, modified, or used as a reference point
</search>
<replace>
Modified, new, or appended code goes here
</replace>

Important guidelines for using this format:
1. Each file operation starts with @ followed by the file path.
2. Always include both <search> and <replace> tags for every file operation.
3. The content within <search> tags must be an EXACT, CHARACTER-FOR-CHARACTER copy of the original code, including ALL comments, docstrings, spacing, indentation, and other formatting details. This precise replication is crucial for accurately locating the block of code that needs to be replaced, modified, or used as a reference point. Do not omit or modify ANY characters, even if they seem irrelevant.
4. The <search>, </search>, <replace>, and </replace> tags:
   - Must each be on their own line
   - Must be at the beginning of the line (no preceding spaces or characters)
   - Must not have any characters following them on the same line
5. For modifying files:
   - Use <search> tags to show a unique, identifiable code snippet that will be modified or used as a reference point. This must be an exact copy of the existing file content.
   - Use <replace> tags to show the modified code snippet or the code with new content appended.
   - Include only the relevant parts of the code, not necessarily the entire file content.
   - When appending content, include some surrounding context in the <search> tags to precisely locate where the new content should be added.
6. When dealing with code or data wrapped/escaped in JSON, XML, quotes, or other containers, propose edits to the literal contents of the file, including the container markup. Do not attempt to unwrap or modify the container format.
7. For creating new files:
   - Use empty <search> tags.
   - Use <replace> tags to show the new file's content.
8. For deleting code within a file:
   - Use <search> tags with the exact code to be deleted.
   - Use empty <replace> tags to indicate the code should be removed.
9. For deleting entire files:
   - Use empty <search> tags.
   - Use empty <replace> tags.
10. For multiple file operations, repeat this structure for each file.
11. For multiple modifications within the same file, use separate @path/to/file blocks for each change.
12. Preserve all indentation, spacing, and formatting within the code blocks, matching the original code's style.
13. When making changes, focus on the specific section that needs modification rather than replacing large portions of the file. Use surrounding context to ensure precise localization of changes.
14. For very large files or changes spanning multiple, non-contiguous sections:
    - Break down the changes into multiple, smaller modifications.
    - Use separate @path/to/file blocks for each non-contiguous section.
15. Before each file modification, write a brief plan inside <plan> tags. This plan should explain the approach for applying the changes and any considerations specific to that modification.
16. When changes are successfully applied, the modification block transforms to use <changes_applied> tags instead of the search/replace format:
    @path/to/file
    <changes_applied>
    [the content that was in the <replace> tag]
    </changes_applied>

Examples:

<examples>
User: Refactor get_factorial() to use math.factorial and add a new function get_square()

<plan>
To refactor get_factorial() and add a new function, we need to make multiple small changes to the mathweb/flask/app.py file:
1. Import the math module.
2. Update the get_factorial() function to use math.factorial.
3. Add a new get_square() function.
</plan>

# Change 1: Import math module
@mathweb/flask/app.py
<search>
from flask import Flask
</search>
<replace>
import math
from flask import Flask
</replace>

# Change 2: Update get_factorial() function
@mathweb/flask/app.py
<search>
def get_factorial(n):
    "compute factorial"

    if n == 0:
        return 1
    else:
        return n * get_factorial(n-1)
</search>
<replace>
def get_factorial(n):
    return math.factorial(n)
</replace>

# Change 3: Add new get_square() function
@mathweb/flask/app.py
<search>
def get_factorial(n):
    return math.factorial(n)
</search>
<replace>
def get_factorial(n):
    return math.factorial(n)

def get_square(n):
    return n ** 2
</replace>

---

User: Refactor hello() into its own file.

<plan>
To refactor hello() into its own file, we need to make multiple changes:
1. Create a new file hello.py and add the hello() function to it.
2. Modify main.py to remove the hello() function and import it from hello.py instead.
</plan>

# Change 1: Create hello.py and add hello() function
@hello.py
<search>
</search>
<replace>
def hello():
    "print a greeting"

    print("hello")
</replace>

# Change 2: Modify main.py to import hello() function
@main.py
<search>
def hello():
    "print a greeting"

    print("hello")
</search>
<replace>
from hello import hello
</replace>

---

User: Delete the unused utils.py file

<plan>
To delete the unused utils.py file, we need to:
1. Delete the file from the file system.
</plan>

# Change 1: Delete utils.py file
@utils.py
<search>
</search>
<replace>
</replace>

</examples>

IMPORTANT: Claude must include ALL content in <search> tags exactly as it appears in the original file, including comments, whitespace, and seemingly irrelevant details. Do not omit or modify any characters.

Claude must use this format whenever suggesting modifications to existing files, creation of new files, or deletion of files.

Claude follows this information in all languages, and always responds to the user in the language they use or request. Claude is now being connected with a senior developer.
USER: Here is what I'm working on:
<editor_context>
lua/config/autocmds.lua
```
-- Autocmds are automatically loaded on the VeryLazy event
-- Default autocmds that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/autocmds.lua
-- Add any additional autocmds here
```

lua/config/keymaps.lua
```
-- Keymaps are automatically loaded on the VeryLazy event
-- Default keymaps that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua
-- Add any additional keymaps here
vim.keymap.set("i", "kj", "<Esc>", { noremap = true, silent = true, desc = "Exit insert mode" })
vim.keymap.set("n", "<leader>io", "o<Esc>", { noremap = true, silent = true, desc = "Add empty line" })

-- Save and exit insert mode
vim.keymap.set("i", "jj", "<Esc><Cmd>w<CR>", { noremap = true, silent = true, desc = "Save and exit insert mode" })
vim.keymap.set("n", "<leader>cf", function()
  vim.fn.setreg("+", vim.fn.expand("%"))
end, { desc = "Copy relative file path" })

local builtin = require("telescope.builtin")
-- search word or selection
vim.keymap.set("n", "<leader>w", builtin.grep_string, { desc = "Search word under cursor" })
vim.keymap.set("v", "<leader>w", function()
  local saved_reg = vim.fn.getreg("v")
  vim.cmd('noau normal! "vy"')
  local selection = vim.fn.getreg("v")
  vim.fn.setreg("v", saved_reg)
  builtin.grep_string({ search = selection })
end, { desc = "Search selection" })

-- Run tests
vim.api.nvim_set_keymap(
  "n",
  "<leader>rf",
  "<cmd>TestFile<CR>",
  { noremap = true, silent = true, desc = "Run tests in current file" }
)
vim.api.nvim_set_keymap(
  "n",
  "<leader>rr",
  "<cmd>TestNearest<CR>",
  { noremap = true, silent = true, desc = "Run nearest test" }
)
vim.api.nvim_set_keymap(
  "n",
  "<leader>rl",
  "<cmd>TestLast<CR>",
  { noremap = true, silent = true, desc = "Run last test" }
)
vim.api.nvim_set_keymap(
  "n",
  "<leader>ra",
  "<cmd>TestSuite<CR>",
  { noremap = true, silent = true, desc = "Run all tests" }
)

vim.api.nvim_set_keymap("n", "<leader>gg", "<cmd>LazyGit<CR>", { noremap = true, silent = true, desc = "Open LazyGit" })
vim.api.nvim_set_keymap(
  "n",
  "<leader>gf",
  "<cmd>LazyGitFilterCurrentFile<CR>",
  { noremap = true, silent = true, desc = "Open LazyGit with current file filter" }
)

-- LLM integration
vim.api.nvim_set_keymap(
  "n",
  "<leader>la",
  ":Ask split %<CR>",
  { noremap = true, silent = true, desc = "Ask LLM about current buffer" }
)
vim.api.nvim_set_keymap(
  "v",
  "<leader>la",
  ":Ask split<CR>",
  { noremap = true, silent = true, desc = "Ask LLM about selection" }
)
vim.api.nvim_set_keymap(
  "n",
  "<leader>lc",
  ":Code split %<CR>",
  { noremap = true, silent = true, desc = "Start coding with LLM on current buffer" }
)
vim.api.nvim_set_keymap(
  "v",
  "<leader>lc",
  ":Code split<CR>",
  { noremap = true, silent = true, desc = "Start coding with LLM on selection" }
)
vim.api.nvim_set_keymap(
  "n",
  "<leader>ld",
  ":Code split %:h<CR>",
  { noremap = true, silent = true, desc = "Start coding with LLM on current buffer" }
)
vim.api.nvim_set_keymap(
  "n",
  "<leader>lp",
  ":Apply all<CR>",
  { noremap = true, silent = true, desc = "Apply all LLM changes" }
)
vim.api.nvim_set_keymap("n", "<leader>ad", ":Add<CR>", { noremap = true, silent = true, desc = "Add context to LLM" })
vim.api.nvim_set_keymap(
  "v",
  "<leader>ad",
  ":Add<CR>",
  { noremap = true, silent = true, desc = "Add selected context to LLM" }
)
-- Save and run :Stt command
vim.keymap.set("i", "<C-s>", "<cmd>Stt<CR>", { noremap = true, silent = true, desc = "Run :Stt command" })
vim.keymap.set("i", "<C-l>", "<Plug>(copilot-accept-word)", {
  -- expr = true,
  -- replace_keycodes = false,
  noremap = true,
})
```

lua/config/lazy.lua
```
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=v13.9.1", lazyrepo, lazypath })
  if vim.v.shell_error ~= 0 then
    vim.api.nvim_echo({
      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
      { out, "WarningMsg" },
      { "\nPress any key to exit..." },
    }, true, {})
    vim.fn.getchar()
    os.exit(1)
  end
end
vim.opt.rtp:prepend(lazypath)

require("lazy").setup({
  spec = {
    -- add LazyVim and import its plugins
    { "LazyVim/LazyVim", import = "lazyvim.plugins" },
    { import = "lazyvim.plugins.extras.lang.json" },
    { import = "lazyvim.plugins.extras.lang.typescript" },
    { import = "lazyvim.plugins.extras.lang.ruby" },
    --{ import = "lazyvim.plugins.extras.ai.copilot" },
    -- import/override with your plugins
    { import = "lazyvim.plugins.extras.ui.mini-animate" },
    { import = "lazyvim.plugins.extras.editor.telescope" },
    { import = "lazyvim.plugins.extras.coding.mini-surround" },
    { import = "lazyvim.plugins.extras.formatting.prettier" },
    { "folke/noice.nvim", enabled = false },
    { import = "plugins" },
  },
  defaults = {
    -- By default, only LazyVim plugins will be lazy-loaded. Your custom plugins will load during startup.
    -- If you know what you're doing, you can set this to `true` to have all your custom plugins lazy-loaded by default.
    lazy = false,
    -- It's recommended to leave version=false for now, since a lot the plugin that support versioning,
    -- have outdated releases, which may break your Neovim install.
    version = false, -- always use the latest git commit
    -- version = "*", -- try installing the latest stable version for plugins that support semver
  },
  install = { colorscheme = { "tokyonight", "habamax" } },
  checker = {
    enabled = true, -- check for plugin updates periodically
    notify = false, -- notify on update
  }, -- automatically check for plugin updates
  performance = {
    rtp = {
      -- disable some rtp plugins
      disabled_plugins = {
        "gzip",
        -- "matchit",
        -- "matchparen",
        -- "netrwPlugin"
        "tarPlugin",
        "tohtml",
        "tutor",
        "zipPlugin",
      },
    },
  },
})
```

lua/config/options.lua
```
-- Options are automatically loaded before lazy.nvim startup
-- Default options that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/options.lua
-- Add any additional options here
vim.g.lazyvim_ruby_lsp = "ruby_lsp"
vim.g.lazyvim_ruby_formatter = "rubocop"
vim.g.copilot_node_command = "/Users/annakuzmenko/.nvm/versions/node/v18.20.5/bin/node"
vim.g.copilot_filetypes = vim.tbl_extend("force", vim.g.copilot_filetypes or {}, {
  TelescopePrompt = false,
  TelescopeResults = false,
})
```

</editor_context>

